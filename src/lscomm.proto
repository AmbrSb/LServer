/*
 * BSD 2-Clause License
 * 
 * Copyright (c) 2021, Amin Saba
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package lserver;

service StatsService
{
  rpc GetStats(StatsRequest) returns (StatsReply) { }
  rpc AddContext(AddContextRequest) returns (AddContextReply) { }
  rpc DeactivateContext(DeactivateContextRequest)
      returns (DeactivateContextReply)
  { }
  rpc GetContextsInfo(GetContextInfoRequest) returns (GetContextInfoReply) { }
}

message StatsRequest { }

message StatsReply
{
  message StatsRec
  {
    int64 time = 1;
    int64 stats_accepted_cnt = 2;
    int64 num_items_total = 3;
    int64 num_items_in_flight = 4;
    int64 stats_transactions_cnt_delta = 5;
    int64 stats_bytes_received_delta = 6;
    int64 stats_bytes_sent_delta = 7;
  }
  repeated StatsRec stats_rec = 1;
}

message AddContextRequest
{
  int32 server_id = 1;
  int32 num_threads = 2;
}

message AddContextReply { }

message DeactivateContextRequest
{
  int32 server_id = 1;
  int32 context_index = 2;
}

message DeactivateContextReply { int32 status_code = 1; }

message GetContextInfoRequest { }

message GetContextInfoReply
{
  message ServerInfo
  {
    message ContextInfo
    {
      int32 context_index = 1;
      int32 threads_cnt = 2;
      int32 active_sessions_cnt = 3;
      int32 strand_pool_size = 4;
      int32 strand_pool_flight = 5;
      bool active = 6;
    }
    repeated ContextInfo contexts_info = 1;
  }
  repeated ServerInfo server_info = 1;
}